// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using SegurosFYP.Entities.Entities;

#nullable disable

namespace SegurosFYP.DataAccess.Context
{
    public partial class DbsegurosfypContext : DbContext
    {
        public DbsegurosfypContext()
        {
        }

        public DbsegurosfypContext(DbContextOptions<DbsegurosfypContext> options)
            : base(options)
        {
        }

        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPantallasPorRoles> tbPantallasPorRoles { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.Panta_Id)
                    .HasName("PK_tbPantallas_Panta_Id");

                entity.ToTable("tbPantallas", "Acces");

                entity.HasIndex(e => e.Panta_Descripcion, "UQ_tbPantallas_Panta_Descripcion")
                    .IsUnique();

                entity.Property(e => e.Panta_Descripcion)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Panta_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.Panta_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.Panta_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.Panta_UsuarioCreacionNavigation)
                    .WithMany(p => p.tbPantallasPanta_UsuarioCreacionNavigation)
                    .HasForeignKey(d => d.Panta_UsuarioCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Panta_UsuarioModificacionNavigation)
                    .WithMany(p => p.tbPantallasPanta_UsuarioModificacionNavigation)
                    .HasForeignKey(d => d.Panta_UsuarioModificacion);
            });

            modelBuilder.Entity<tbPantallasPorRoles>(entity =>
            {
                entity.HasKey(e => e.Papro_Id)
                    .HasName("PK_tbPantallasPorRoles_Papro_Id");

                entity.ToTable("tbPantallasPorRoles", "Acces");

                entity.HasIndex(e => new { e.Panta_Id, e.Roles_Id }, "UQ_tbPantallasPorRoles_Panta_Id_Roles_Id")
                    .IsUnique();

                entity.Property(e => e.Papro_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.Papro_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.Papro_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.Panta)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.Panta_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Papro_UsuarioCreacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolesPapro_UsuarioCreacionNavigation)
                    .HasForeignKey(d => d.Papro_UsuarioCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Papro_UsuarioModificacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolesPapro_UsuarioModificacionNavigation)
                    .HasForeignKey(d => d.Papro_UsuarioModificacion);

                entity.HasOne(d => d.Roles)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.Roles_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.Roles_Id)
                    .HasName("PK_tbRoles_Roles_Id");

                entity.ToTable("tbRoles", "Acces");

                entity.HasIndex(e => e.Roles_Descripcion, "UQ_tbRoles_Roles_Descripcion")
                    .IsUnique();

                entity.Property(e => e.Roles_Descripcion)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Roles_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.Roles_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.Roles_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.Roles_UsuarioCreacionNavigation)
                    .WithMany(p => p.tbRolesRoles_UsuarioCreacionNavigation)
                    .HasForeignKey(d => d.Roles_UsuarioCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Roles_UsuarioModificacionNavigation)
                    .WithMany(p => p.tbRolesRoles_UsuarioModificacionNavigation)
                    .HasForeignKey(d => d.Roles_UsuarioModificacion);
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.Usuar_Id)
                    .HasName("PK_tbUsuarios_Usuar_Id");

                entity.ToTable("tbUsuarios", "Acces");

                entity.HasIndex(e => e.Usuar_Usuario, "UQ_tbUsuarios_Usuar_Usuario")
                    .IsUnique();

                entity.Property(e => e.Usuar_Contrasena).IsRequired();

                entity.Property(e => e.Usuar_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.Usuar_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.Usuar_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Usuar_UltimaSesion).HasColumnType("datetime");

                entity.Property(e => e.Usuar_Usuario)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}