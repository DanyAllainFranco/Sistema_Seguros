@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    
    @:ViewData["Title"] = "@Model.ViewName";
    @:ViewData["ModelName"] = "@Model.ViewDataTypeShortName".Replace("ViewModel","");

        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<h1>@Model.ViewName</h1>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
}
@@foreach(var item in Model)
{
    <div>
        <div class="d-flex justify-content-around">
            <h1>@Model.ViewDataTypeShortName</h1>
            <a asp-action="Index">Back to List</a>
        </div>
        <hr />
        <form asp-controller="EstadoCivil" method="post" asp-action="Details">
            <dl class="row">
    @{
        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
            {
                if (!GetValueExpression(property).EndsWith("FechaCreacion") &&
                                        !GetValueExpression(property).EndsWith("FechaModificacion") &&
                                        !GetValueExpression(property).EndsWith("Estado") &&
                                        !GetValueExpression(property).EndsWith("UsuarioCreacion") &&
                                        !GetValueExpression(property).EndsWith("UsuarioModificacion"))
                        {
                <dt class = "col-sm-2">
                    @@Html.DisplayNameFor(model => item.@GetValueExpression(property))
                </dt>
                <dd class = "col-sm-10">
                    @@Html.DisplayFor(model => item.@GetValueExpression(property))
                </dd>
                        }
            }
            @*else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
            <dt class = "col-sm-2">
                @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
            </dt>
            <dd class = "col-sm-10">
                @@Html.DisplayFor(model => model.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
            </dd>
            }*@
        }
    }       </dl>
            <div class="d-flex justify-content-end" style="gap: 5px;">
                <a asp-route-id="@@item.id" type="button" class="btn btn-primary FetchData" data-toggle="modal" data-target="#EditarModal" data-id="@@item.id"><i class="bi bi-pen-fill"></i>Editar</a>
                <a asp-route-id="@@item.id" type="button" class="btn btn-danger" data-toggle="modal" data-target="#ModalEliminar" onclick="ObtenerID('@@item.id')"><i class="fa fa-trash"></i>Eliminar</a>
            </div>
        </form>
    </div>

    <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Accion</th>
                    <th>Usuario</th>
                    <th>Fecha</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Creacion</td>
                    <td>@@Html.DisplayFor(modelItem => item.UsuarioCreacion)</td>
                    @{
                        foreach (var property in Model.ModelMetadata.Properties)
                            {
                                if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
                                {
                                    if (property.PropertyName.EndsWith("FechaCreacion"))
                                    {
                                        @:<td>@@Html.DisplayFor(modelItem => item.@property.PropertyName)</td>
                                    }
                                }
                            }
                    }
                </tr>
                <tr>
                    <td>Modificacion</td>
                    <td>@@Html.DisplayFor(modelItem => item.UsuarioModificacion)</td>
                    @{
                        foreach (var property in Model.ModelMetadata.Properties)
                            {
                                if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
                                {
                                    if (property.PropertyName.EndsWith("FechaModificacion"))
                                    {
                                        @:<td>@@Html.DisplayFor(modelItem => item.@property.PropertyName)</td>
                                    }
                                }
                            }
                    }
                </tr>
            </tbody>
        </table>
}
<div class="modal fade" id="EditarModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Editar</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                    @@Html.Partial("_Update", new SegurosFYP.Models.@Model.ViewDataTypeShortName ())
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ModalEliminar" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Eliminar</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @@Html.Partial("_Delete", new SegurosFYP.Models.@Model.ViewDataTypeShortName ())
            </div>
        </div>
    </div>
</div>

<script>
        var url = 'https://localhost:44347/api/EstadoCivil/Cargar/EstadoCivil?Estad_Id=';

        document.querySelectorAll('.FetchData').forEach(item => {
            item.addEventListener('click', function () {
                var id = this.getAttribute('data-id');
                console.log(id);
                fetchData(id);
            });
        });

        function fetchData(id) {
            console.log(id);
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    @{
                        foreach (var property in Model.ModelMetadata.Properties)
                        {
                            if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
                            {
                                if (!property.PropertyName.EndsWith("FechaCreacion") &&
                                    !property.PropertyName.EndsWith("FechaModificacion") &&
                                    !property.PropertyName.EndsWith("Estado") &&
                                    !property.PropertyName.EndsWith("UsuarioCreacion") &&
                                    !property.PropertyName.EndsWith("UsuarioModificacion"))
                                {
                                    @:document.getElementById('@property.PropertyName').value = data.data[0].@property.PropertyName;
                                }
                            }
                        }
                    }
                })
                .catch(error => console.error('Hubo un error:', error));
        }
    </script>

@{
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}
